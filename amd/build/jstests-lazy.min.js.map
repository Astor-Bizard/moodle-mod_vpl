{"version":3,"sources":["../src/jstests-lazy.js"],"names":["define","$","VPLUtil","tests","result","testing","nAsserts","showResults","stat","window","console","log","append","text","message","length","list","index","element","assert","b","push","assertEquals","a","runTests","name","test","e","stack","returnTrue","returnFalse","rawData","ArrayBuffer","byteLength","bufferData","Uint8Array","Math","round","random","rawResult","String2ArrayBuffer","stringResult","ArrayBuffer2String","bufferResult","fileExtension","isImage","isBinary","isBlockly","validFileName","start"],"mappings":"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","sourcesContent":["// This file is part of VPL for Moodle - http://vpl.dis.ulpgc.es/\n//\n// VPL for Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// VPL for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with VPL for Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * IDE Control\n * @package mod_vpl\n * @copyright 2017 Juan Carlos Rodríguez-del-Pino\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author Juan Carlos Rodríguez-del-Pino <jcrodriguez@dis.ulpgc.es>\n */\n\ndefine(\n    [\n        'jquery',\n        'mod_vpl/vplutil',\n    ],\n    function($, VPLUtil) {\n        var tests = [];\n        var result = [];\n        var testing = '';\n        var nAsserts = 0;\n        /**\n         * Show results of tests in page and window.console\n         */\n        function showResults() {\n            let stat = nAsserts + \" asserts tested\";\n            window.console.log(stat);\n            $('#test_results').append($('<p></p>').text(stat));\n            let message;\n            if (result.length == 0) {\n                message = 'Test passed';\n            } else {\n                message = result.length + ' errors found';\n            }\n            window.console.log(message);\n            $('#test_results').append($('<p></p>').text(message));\n            if (result.length > 0) {\n                let list = $('<ol></ol>');\n                for (let index = 0; index < result.length; index++) {\n                    window.console.log((index + 1) + ': ' + result[index]);\n                    let element = $('<li></li>');\n                    element.text(result[index]);\n                    list.append(element);\n                }\n                $('#test_results').append(list);\n            }\n        }\n        /**\n         * Basic test assert\n         * @param {boolean} b test result\n         * @param {string} message Optional message\n         */\n        function assert(b, message) {\n            nAsserts++;\n            if (!b) {\n                if (typeof message == 'string') {\n                    result.push(\"Error: \" + message + \" testing \" + testing);\n                }\n            }\n        }\n        /**\n         * Basic test assert\n         * @param {boolean} a Expected\n         * @param {boolean} b Actual\n         * @param {string} message Optional message\n         */\n        function assertEquals(a, b, message) {\n            nAsserts++;\n            if (a != b) {\n                if (typeof message == 'string') {\n                    result.push(\"Error: \" + message + \" testing \" + testing + '. Expected \"' + a + '\" found \"' + b + '\"');\n                }\n            }\n        }\n        /**\n         * Run tests in tests array\n         */\n        function runTests() {\n            for (let index = 0; index < tests.length; index++) {\n                try {\n                    testing = tests[index].name;\n                    tests[index].test();\n                } catch (e) {\n                    result.push(\"Error: Exception \" + e.message + \" testing \" + testing + \"\\n\" + e.stack);\n                }\n            }\n        }\n        tests.push({\n            'name': \"VPLUtil\",\n            'test': function() {\n                assert(VPLUtil.returnTrue(), 'returnTrue');\n                assert(!VPLUtil.returnFalse(), 'returnFalse');\n                (function() {\n                    let rawData = new ArrayBuffer(13);\n                    assertEquals(13, rawData.byteLength, 'rawData.byteLength');\n                    let bufferData = new Uint8Array(rawData);\n                    for (let index = 0; index < bufferData.length; index++) {\n                        bufferData[index] = Math.round(Math.random() * 255);\n                    }\n                    assertEquals(13, bufferData.length, 'bufferData.length');\n                    let stringData = \"abcdeñhfjéÇ123143565387095609784\";\n                    let rawResult = VPLUtil.String2ArrayBuffer(stringData);\n                    let stringResult = VPLUtil.ArrayBuffer2String(rawResult);\n                    assertEquals(stringData, stringResult, 'ArrayBuffer2String');\n                    stringResult = VPLUtil.ArrayBuffer2String(rawData);\n                    rawResult = VPLUtil.String2ArrayBuffer(stringResult);\n                    let bufferResult = new Uint8Array(rawResult);\n                    assertEquals(bufferData.length, bufferResult.length, 'String2ArrayBuffer');\n                    if (bufferData.length == bufferResult.length) {\n                        for (let index = 0; index < bufferData.length; index++) {\n                            assertEquals(bufferData[index], bufferResult[index], 'String2ArrayBuffer values');\n                        }\n                    }\n                })();\n                (function() {\n                    assertEquals('c', VPLUtil.fileExtension('a.c'), 'fileExtension');\n                    assertEquals('C', VPLUtil.fileExtension('a.c.C'), 'fileExtension');\n                    assertEquals('hxx', VPLUtil.fileExtension('a.hxx'), 'fileExtension');\n                    assertEquals('all', VPLUtil.fileExtension('.all'), 'fileExtension');\n                })();\n                (function() {\n                    assert(!VPLUtil.isImage('a.c'), 'isImage');\n                })();\n                (function() {\n                    assert(!VPLUtil.isBinary('a.c'), 'isBinary');\n                })();\n                (function() {\n                    assert(!VPLUtil.isBlockly('a.c'), 'isBlockly');\n                })();\n                (function() {\n                    assert(VPLUtil.validFileName('a.c'), 'validFileName');\n                })();\n            }\n        });\n        runTests();\n        return {\n            start: function() {\n                $(showResults);\n            }\n        };\n    }\n);\n"],"file":"jstests-lazy.min.js"}